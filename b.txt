1069951# CREANDO INODES PARA LAS CARPETAS Y LOS BLOQUES
                block_carpeta = structs.BloquesCarpetas()
                bytes_block_carpeta = bytes(block_carpeta)
                
                block_archivos = structs.BloquesArchivos()
                bytes_block_archivo = bytes(block_archivos)
                block_archivos.b_content = ""

                
                # encontrado = False
                ultimo_b_inodo += 1
                for indice, valor in enumerate(carpetas):
                    print(str(ultimo_b_inodo) + " - "+ (valor))
                    
                    if indice == 4:
                        break

                    # encontrado = buscarBloques(path,valor)

                    # if encontrado:
                    #     bloque_start += 64
                    #     pass
                    # else:
                    if indice == len(carpetas) - 1:
                        
                        block_carpeta.b_content[indice].b_name = valor
                        block_carpeta.b_content[indice].b_inodo = ultimo_b_inodo
                        

                        # file.seek(bloque_start)
                        # # print(f"BLQUE: {bloque_start}")
                        # file.write(bytes(block_carpeta))
                        # bloque_start += 64

                        
                        print(str(ultimo_b_inodo+1) + " - " + name_archivo)
                        block_carpeta.b_content[indice+1].b_name = name_archivo
                        block_carpeta.b_content[indice+1].b_inodo = ultimo_b_inodo+1
                        
                        # inodo de la carpeta
                        inode = structs.Inodos()
                        inode.i_uid = int(uid)
                        inode.i_gid = int(gid)
                        inode.i_size = 0
                        inode.i_atime = int(time.time())
                        inode.i_ctime = int(time.time())
                        inode.i_mtime = int(time.time())
                        inode.i_type = 0
                        inode.i_perm = int(permisos)

                        cont = 0
                        for _ in inode.i_block:
                            if _ == -1:
                                inode.i_block[cont] = ultimo_b_inodo + 1 
                            cont += 1
                        # print(inode.i_block)

                        with open(path, "rb+") as bfiles:
                            bfiles.seek(s_inode_start)
                            bfiles.write(bytes(inode))
                        
                        s_inode_start += 101

                        
                        """Inodo Archivo"""
                        inode.i_type = 1
                        inode.i_size = 0
                        inode.i_block[0] = 0
                        with open(path, "rb+") as bfiles:
                            bfiles.seek(s_inode_start)
                            bfiles.write(bytes(inode))
                        
                        s_inode_start += 101
                        escribirUltimoPP(path)

                        # file.seek(bloque_start)
                        # # print(f"BLQUE: {bloque_start}")
                        # file.write(bytes(block_carpeta))
                        # bloque_start += 64
                                
                            
                    else:

                        # print(ultimo_b_inodo)
                        # print("salir")

                        block_carpeta.b_content[indice].b_name = valor
                        block_carpeta.b_content[indice].b_inodo = ultimo_b_inodo
                        
                        # print(type(ultimo_b_inodo))
                        # print(ultimo_b_inodo)
                        print("aqui")

                        inode = structs.Inodos()
                        inode.i_uid = int(uid)
                        inode.i_gid = int(gid)
                        inode.i_size = 0
                        inode.i_atime = int(time.time())
                        inode.i_ctime = int(time.time())
                        inode.i_mtime = int(time.time())
                        inode.i_type = 0
                        inode.i_perm = int(permisos)
                        
                        cont = 0
                        for _ in inode.i_block:
                            if _ == -1:
                                inode.i_block[cont] = ultimo_b_inodo + 1 
                            cont+=1

                        # inode.i_block[indice]  = ultimo_b_inodo+1

                        
                        # print(inode.i_block)
                        ultimo_b_inodo += 1

                        with open(path, "rb+") as bfiles:
                            bfiles.seek(s_inode_start)
                            bfiles.write(bytes(inode))

                        s_inode_start += 101

                        file.seek(bloque_start)
                        # print(f"BLQUE: {bloque_start}")
                        file.write(bytes(block_carpeta))
                        bloque_start += 64
                        """"""
                
                for _ in block_carpeta.b_content:
                    print(_.b_name)
                # print(block_archivos.b_content)
                # print("===========")
                # print(inode.i_block)
                file.seek(bloque_start)
                # print(f"BLQUE: {bloque_start}")
                file.write(bytes(block_carpeta))
                file.write(bytes(block_archivos))

                bloque_start += 64

                file.close()

    except Exception as e:
        print("\tERROR: No se pudo leer el disco en la ruta: " +path+", debido a: "+str(e))
    
    bloque_final = bloque_start + 128
    # Abre un archivo en modo esc
    # ritura ('w' para escribir, 'a' para agregar al final)
    with open("MAINS/backs/block_final.txt", 'w') as archivo:
        # Escribe una cadena en el archivo
        archivo.write(str(bloque_final))
        # print("Bloque Final Guardado")